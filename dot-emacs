(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(load-theme 'zenburn t)

(require 'whitespace)
(setq whitespace-style '(face empty tabs lines-tail trailing))
(global-whitespace-mode t)

(setq package-check-signature nil)
(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(package-initialize)
(let (v
      (l '(clojure-mode
           cider
           closql
           uuidgen
           magit
           restclient
           twittering-mode
           markdown-mode)))
  (dolist (e l v)
    (unless (package-installed-p e)
      (package-refresh-contents)
      (package-install e))))

(require 'eshell)

(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
(setq cider-boot-parameters "dev")

(setq max-lisp-eval-depth 10000)
(setq max-specpdl-size 10000)

(if (string= "peirce" (system-name))
    (load "~/prj/reorg.el/reorg.el")
  (load "~/prj/wtd/wtd.el"))

(defmacro dysfun (f)
  `(defun ,f (&optional args)
     (interactive)
     (message (concat "a call was made to disabled function "
                      (symbol-name (quote ,f))))))

;; disable the insert key
(dysfun overwrite-mode)

;; disable org-mode archiving feature
(dysfun org-archive-set-tag)
(dysfun org-archive-subtree)
(dysfun org-archive-subtree-default)
(dysfun org-archive-subtree-default-with-confirmation)
(dysfun org-archive-to-archive-sibling)

(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

(with-eval-after-load 'magit
  (require 'forge))

(require 'uniquify)
(setq-default uniquify-buffer-name-style 'post-forward-angle-brackets)

(when (fboundp 'global-font-lock-mode) (global-font-lock-mode t))
(put 'downcase-region 'disabled nil)
(put 'erase-buffer 'disabled nil)
(put 'upcase-region 'disabled nil)

(ido-mode 1)
(column-number-mode 1)
(global-auto-revert-mode 1)
(menu-bar-mode -1)
(show-paren-mode)
(transient-mark-mode 1)

(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq-default truncate-partial-width-windows nil)
(setq-default auto-save-default nil)
(setq-default backup-inhibited t)
(setq-default c-basic-offset 4)
(setq-default erc-server "irc.sa2s.us")
(setq-default inhibit-startup-screen t)
(setq-default large-file-warning-threshold nil)
(setq-default show-trailing-whitespace t)
(setq-default truncate-partial-width-windows nil)

(global-set-key (kbd "ESC <up>") 'windmove-up)
(global-set-key (kbd "ESC <down>") 'windmove-down)
(global-set-key (kbd "ESC <left>") 'windmove-left)
(global-set-key (kbd "ESC <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>") 'shrink-window)
(global-set-key (kbd "C-c <down>") 'enlarge-window)
(global-set-key (kbd "C-c <left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-c <right>") 'enlarge-window-horizontally)
(global-set-key (kbd "C-c g") 'goto-line)
(global-set-key (kbd "\C-c d") 'browse-url)
(global-set-key (kbd "C-c w") 'delete-trailing-whitespace)
(global-set-key (kbd "C-c u") 'mark-sexp)
(global-set-key (kbd "C-c i") 'indent-sexp)
(global-set-key (kbd "C-c t") 'org-insert-todo-heading)

(defun split-window-one-fourth ()
  (interactive)
  (split-window-vertically)
  (windmove-down)
  (split-window-vertically)
  (delete-window))

(defun split-window-one-eighth ()
  (interactive)
  (split-window-one-fourth)
  (split-window-vertically)
  (delete-window))

(defun format-html ()
  (interactive)
  (html-mode)
  (beginning-of-buffer)
  (replace-string "<" (concat (kbd "C-j") "<"))
  (indent-region (point-min) (point-max)))

(defun convert-to-org ()
  (interactive)
  (let* ((f (buffer-file-name (current-buffer)))
         (new-f (concat "/tmp/" (file-name-base f) ".org")))
    (shell-command (concat "pandoc " f " -o " new-f))
    (find-file new-f)))

(defun copy-sexp ()
  "mark and copy sexp"
  (interactive)
  (mark-sexp)
  (kill-ring-save (region-beginning)
                  (region-end)))

(global-set-key "\C-x\C-e" 'copy-sexp)

;; from https://www.emacswiki.org/emacs/UnfillParagraph
(defun unfill-paragraph (&optional region)
      "Takes a multi-line paragraph and makes it into a single line of text."
      (interactive (progn (barf-if-buffer-read-only) '(t)))
      (let ((fill-column (point-max))
            ;; This would override `fill-column' if it's an integer.
            (emacs-lisp-docstring-fill-column t))
        (fill-paragraph nil region)))

(global-set-key "\M-Q" 'unfill-paragraph)

(defun iwb ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min)
                 (point-max)
                 nil)
  (untabify (point-min)
            (point-max)))

(defun toggle-tpww ()
  (interactive)
  (setq truncate-partial-width-windows
        (not truncate-partial-width-windows)))

(defmacro defshell (name cmd)
  `(defun ,name ()
     (interactive)
     (insert (shell-command-to-string ,cmd))))

(defmacro defshellonreg (name cmd &optional replace)
  `(defun ,name (beg end)
     (interactive "r")
     (shell-command-on-region beg end ,cmd
                              (if ,replace (current-buffer) nil)
                              ,replace)))

(defun preserve-indenting (region-text)
  (let* ((start-col (save-excursion (goto-char (region-beginning))
                                    (current-column)))
         (spacer (apply 'concat (make-list start-col "\s"))))
    (concat "\n" spacer region-text "\n" spacer)))

(defun apply-region (f)
  ;; f gets region text, output of f replaces region text
  (let* ((beginning   (region-beginning))
         (end         (region-end))
         (region-text (buffer-substring beginning end)))
    (delete-region beginning end)
    (goto-char beginning)
    (insert (funcall f region-text))))

(defmacro defunonreg (name arg-list &rest expressions)
  `(defun ,name ()
     (interactive)
     (apply-region
      (lambda ,arg-list
        ,@expressions))))

(defmacro defregexp (name a b)
  `(defun ,name ()
     (interactive)
     (replace-regexp ,a ,b
                     nil
                     (if (use-region-p) (region-beginning))
                     (if (use-region-p) (region-end))
                     nil)))

;; this turns out to be less useful than expected because it's really
;; the string escaping in emacs lisp that is annoying, not the native
;; regexp support so much.  So the clojure regexps end up looking the
;; same as the emacs ones.
(defmacro defcljregexp (name a b)
  `(defshellonreg ,name (concat "ced " ,a " " ,b)))

(if (string= "peirce" (system-name))
    ;; linux
    (defshellonreg pbcopy-region "xclip -selection clipboard")
  ;; mac
  (defshellonreg pbcopy-region "pbcopy"))

(defshellonreg xml->clj-region "xmlclj" t)

(defshellonreg zprint-region "zprint" t)

(defun zwb ()
  (interactive)
  (mark-whole-buffer)
  (zprint-region (region-beginning) (region-end))
  (iwb))

(defun zprint-sexp ()
  (interactive)
  (mark-sexp)
  (let ((b (region-beginning))
        (e (region-end)))
    (replace-regexp "\(" "\[" nil b e nil)
    (replace-regexp "\)" "\]" nil b e nil)
    (zprint-region b e)
    (indent-sexp)))

(defshellonreg sort-sexp-region "sort-sexp" t)

(defun sort-sexp ()
  (interactive)
  (mark-sexp)
  (sort-sexp-region (region-beginning) (region-end))
  (zprint-region (region-beginning) (region-end))
  (indent-region (region-beginning) (region-end)))

(defshellonreg htm2clj-region "html2clj" t)

(defshellonreg edn->json "edn2json" t)

(defshellonreg json->edn "json2edn | ced '#js' '' | zprint" t)

(defshellonreg print-table "print-table" t)

(defshellonreg jq "jq ." t)

(defshell uuid "uuidgen | awk '{print tolower($0)}' | tr -d '\n'")

(defshell stepsdata "stepsdata")

(defshell sleepdata "sleepdata")

(defshell ls "ls")

(defregexp kw->jsonkw ":\\([^ ]+\\) " "\"\\1\": ")

(defregexp kw->str ":\\([^ ]+\\) " "\"\\1\"")

(defunonreg count-chars (region-text)
  (concat region-text " " (number-to-string (length region-text))))

(defunonreg tweet-region (region-text)
  (twittering-call-api
   'update-status
   `((status . ,region-text)))
  region-text)

(defunonreg org-block-region (region-text)
  (concat "#+BEGIN_SRC" (preserve-indenting region-text)
          "#+END_SRC\n"))

(defshellonreg sort-uniq "sort | uniq" t)

;; (require 'esqlite)
;; ln -s $HOME/Library/Application\ Support/Firefox/Profiles/rwqey9hs.default-release/places.sqlite $HOME/places.sqlite
;; (defun query-firefox-bookmark-urls ()
;;  (esqlite-read "/Users/roblevy/places.sqlite"
;;                "select moz_places.url from moz_bookmarks join moz_places on moz_bookmarks.fk=moz_places.id where moz_bookmarks.parent=(select id from moz_bookmarks where title='toolbar')"))

;; (defun browse-bookmark ()
;;   (interactive)
;;   (let ((choice (ido-completing-read
;;                  "browse url: "
;;                  (query-firefox-bookmark-urls))))
;;     (browse-url choice)))

(defun buffer-tail (bfr char-count)
  (with-current-buffer (get-buffer bfr)
    (save-excursion
      (end-of-buffer)
      (buffer-substring (if (< char-count (point))
                            (- (point) char-count)
                          1)
                        (point)))))

(defun last-cider-result ()
  (with-current-buffer (get-buffer "*Messages*")
    (save-excursion
      (end-of-buffer)
      (car
       (last
        (seq-filter (lambda (s)
                      (and (> (length s) 2)
                           (string= "=>"
                                    (substring s 0 2))))
                    (split-string
                     (buffer-substring (- (point) 10000) (point))
                     "\n")))))))

(defun wait-for-output (detector-fn extractor-fn success-handler delay-seconds)
  (sit-for delay-seconds)
  (let ((r (funcall extractor-fn)))
    (if (funcall detector-fn r)
        (if success-handler
            (funcall success-handler)
          r)
      (wait-for-output detector-fn extractor-fn success-handler delay-seconds))))

(defun wait-for-cider-result (marker)
  (wait-for-output (lambda (last-line)
                     (not (string= marker last-line)))
                   'last-cider-result
                   nil
                   0.25))

(defun random-alnum ()
  ;; credit to
  ;; https://stackoverflow.com/questions/37038441/generate-a-random-5-letternumber-string-at-cursor-point-all-lower-case/37039205
  (let* ((alnum "abcdefghijklmnopqrstuvwxyz0123456789")
         (i (% (abs (random)) (length alnum))))
    (substring alnum i (1+ i))))

(defun format-test-results (cider-output &optional test-file)
  (let ((results-map-str (substring cider-output 3)))
    (if test-file
        (concat "{\"" test-file "\" " results-map-str "}")
      results-map-str)))

(defun run-tests (&optional test-file)
  (interactive)
  (when test-file (find-file test-file))
  (cider-repl-set-ns (cider-expected-ns))
  (let ((marker (concat "=> "
                        (random-alnum) (random-alnum) (random-alnum)
                        (random-alnum) (random-alnum) (random-alnum)
                        " ... awaiting result ...")))
    (message marker)
    (cider-interactive-eval "(clojure.test/run-tests)")
    (format-test-results (wait-for-cider-result marker) test-file)))

(defun test-files ()
  (seq-filter (lambda (path-to-file)
                (> (length path-to-file) 2))
              (split-string (shell-command-to-string "find . | grep _test.clj")
                            "\n")))

(defun cider-eval-merged-test-results (results)
  (cider-interactive-eval
   (concat "(clojure.pprint/pprint (merge " (string-join results " ") "))")))

(defun format-all-test-results (results)
  (let ((fails-and-errs (seq-filter (lambda (r)
                                      (not (cl-search ":fail 0, :error 0" r)))
                                    results)))
    ;; print all results in cider REPL
    (cider-eval-merged-test-results results)
    ;; if any failed or error separate these out to spot them more handily
    (if fails-and-errs
      (progn
        (cider-interactive-eval "(println \"Failed or erroring tests: \")")
        (cider-eval-merged-test-results fails-and-errs))
      (cider-interactive-eval "(println \"All tests pass!\")"))))

(defun run-tests-subdirs ()
  (interactive)
  (cider-interactive-eval
   (concat "\n\n(println \"*** running all tests in subdirectories of "
           (pwd)
           " ***\")\n\n"))
  (let ((tree-root default-directory))
    (format-all-test-results
     (mapcar (lambda (path-to-file)
               (cd tree-root)
               (message (concat "running tests in " path-to-file))
               (run-tests path-to-file))
             (test-files)))))

(defun cider-c ()
  (interactive)
  (cider-connect '(:host "localhost" :port 41235)))

(defun cider-fullstart (bfr cmd-home cmd done-indicator-text)
  (shell bfr)
  (insert (concat "cd " cmd-home))
  (comint-send-input)
  (insert cmd)
  (comint-send-input)
  (wait-for-output (lambda (last-lines-str)
                     (string-match (concat "[[:space:]]*"
                                           done-indicator-text
                                           "[[:space:]]*")
                                   last-lines-str))
                   (lambda ()
                     (buffer-tail bfr 1000))
                   'cider-c
                   0.25))

(when (not (string= "peirce" (system-name)))
  ;; by process of elimination, must be work laptop
  (load "~/.emacs.d/cisco.el"))

(setq vc-follow-symlinks t)

(setq clojure-indent-style 'always-align)

(setq js-indent-level 2)

(setq org-return-follows-link t)

(beacon-mode 1)
(setq beacon-blink-when-window-scrolls 1)
(global-set-key (kbd "C-c b") 'beacon-blink)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(beacon uuidgen closql request twittering-mode yaml-mode markdown-mode restclient rest-client magit cider))
 '(safe-local-variable-values
   '((eval add-to-list 'auto-mode-alist
           '("\\.clj-template$" . clojure-mode))
     (eval progn
           (put 's/defn 'clojure-doc-string-elt 2)
           (define-clojure-indent
             (puppetlabs\.trapperkeeper\.core/defservice
              '(:defn
                (:defn)))
             (trapperkeeper/defservice
              '(:defn
                (:defn)))
             (tk/defservice
              '(:defn
                (:defn)))
             (defservice
               '(:defn
                 (:defn)))
             (dotests 2)
             (context 2)
             (DELETE 2)
             (GET 2)
             (PATCH 2)
             (POST 2)
             (PUT 2)))
     (cljr-favor-prefix-notation)
     (cljr-favor-prefix-notation . t)
     (eval progn
           (put 's/defn 'clojure-doc-string-elt 2)
           (define-clojure-indent
             (puppetlabs\.trapperkeeper\.core/defservice
              '(:defn
                (:defn)))
             (trapperkeeper/defservice
              '(:defn
                (:defn)))
             (tk/defservice
              '(:defn
                (:defn)))
             (defservice
               '(:defn
                 (:defn)))
             (context 2)
             (DELETE 2)
             (GET 2)
             (PATCH 2)
             (POST 2)
             (PUT 2)))
     (magit-todos-exclude-globs "*.html" "*.org" "*.md" "*.map"))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(setq initial-scratch-message
  (concat
   "(insert initial-scratch-message)\n"
   "----------------------------------------"
   "----------------------------------------\n"
   "0                                       "
   "                                      80\n"))

(if (or (file-exists-p (concat default-directory "project.clj"))
        (file-exists-p (concat default-directory "deps.edn")))
    (cider-jack-in))


(buffer-substring (point-at-bol) (point-at-eol))
(put 'list-timers 'disabled nil)
